{% extends "base.twig" %}

{% block title %}User Management{% endblock %}

{% block content %}
<div class="container-fluid">
    <div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom">
        <h1 class="h2">User Management</h1>
        <button type="button" class="btn btn-primary" onclick="showCreateUserModal()">
            <i class="fas fa-plus me-2"></i>Add New User
        </button>
    </div>

    <!-- Search and Filter -->
    <div class="row mb-3">
        <div class="col-md-6">
            <input type="text" class="form-control" id="searchInput" placeholder="Search users..." onkeyup="searchUsers()">
        </div>
        <div class="col-md-6 text-end">
            <div class="btn-group" role="group">
                <button type="button" class="btn btn-outline-secondary" onclick="filterUsers('all')">All</button>
                <button type="button" class="btn btn-outline-secondary" onclick="filterUsers('active')">Active</button>
                <button type="button" class="btn btn-outline-secondary" onclick="filterUsers('admin')">Admins</button>
            </div>
        </div>
    </div>

    <!-- Users Table -->
    <div class="card shadow">
        <div class="card-body">
            <div class="table-responsive">
                <table class="table table-hover" id="usersTable">
                    <thead class="table-dark">
                        <tr>
                            <th>ID</th>
                            <th>Username</th>
                            <th>Real Name</th>
                            <th>Fidonet Address</th>
                            <th>Email</th>
                            <th>Status</th>
                            <th>Admin</th>
                            <th>Created</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody id="usersTableBody">
                        <!-- Populated by JavaScript -->
                    </tbody>
                </table>
            </div>

            <!-- Pagination -->
            <nav aria-label="Users pagination">
                <ul class="pagination justify-content-center" id="usersPagination">
                    <!-- Populated by JavaScript -->
                </ul>
            </nav>
        </div>
    </div>
</div>

<!-- Create/Edit User Modal -->
<div class="modal fade" id="userModal" tabindex="-1" aria-labelledby="userModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="userModalLabel">Add New User</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="userForm">
                    <input type="hidden" id="userId" name="userId">
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label for="username" class="form-label">Username <span class="text-danger">*</span></label>
                            <input type="text" class="form-control" id="username" name="username" required>
                        </div>
                        <div class="col-md-6 mb-3">
                            <label for="realName" class="form-label">Real Name</label>
                            <input type="text" class="form-control" id="realName" name="real_name">
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label for="email" class="form-label">Email</label>
                            <input type="email" class="form-control" id="email" name="email">
                        </div>
                        <div class="col-md-6 mb-3">
                            <label for="fidonetAddress" class="form-label">Fidonet Address</label>
                            <input type="text" class="form-control" id="fidonetAddress" name="fidonet_address" placeholder="1:123/456.789">
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label for="password" class="form-label">Password <span id="passwordRequired" class="text-danger">*</span></label>
                            <input type="password" class="form-control" id="password" name="password">
                            <small class="form-text text-muted" id="passwordHelp">Leave blank when editing to keep current password</small>
                        </div>
                        <div class="col-md-6 mb-3">
                            <div class="form-check mt-4">
                                <input class="form-check-input" type="checkbox" id="isActive" name="is_active" checked>
                                <label class="form-check-label" for="isActive">
                                    Active User
                                </label>
                            </div>
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" id="isAdmin" name="is_admin">
                                <label class="form-check-label" for="isAdmin">
                                    Administrator
                                </label>
                            </div>
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" onclick="saveUser()">Save User</button>
            </div>
        </div>
    </div>
</div>

<!-- User Details Modal -->
<div class="modal fade" id="userDetailsModal" tabindex="-1" aria-labelledby="userDetailsModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="userDetailsModalLabel">User Details</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body" id="userDetailsBody">
                <!-- Populated by JavaScript -->
            </div>
        </div>
    </div>
</div>

<script>
let currentPage = 1;
let currentSearch = '';
let currentFilter = 'all';

document.addEventListener('DOMContentLoaded', function() {
    loadUsers();
});

function loadUsers(page = 1) {
    currentPage = page;
    const searchParam = currentSearch ? `&search=${encodeURIComponent(currentSearch)}` : '';
    
    fetch(`/admin/api/users?page=${page}&limit=25${searchParam}`)
        .then(response => response.json())
        .then(data => {
            displayUsers(data.users);
            displayPagination(data.pagination);
        })
        .catch(error => {
            console.error('Error loading users:', error);
            showAlert('Error loading users', 'danger');
        });
}

function displayUsers(users) {
    const tbody = document.getElementById('usersTableBody');
    tbody.innerHTML = '';
    
    users.forEach(user => {
        const row = document.createElement('tr');
        row.innerHTML = `
            <td>${user.id}</td>
            <td>${user.username}</td>
            <td>${user.real_name || '-'}</td>
            <td>${user.fidonet_address || '-'}</td>
            <td>${user.email || '-'}</td>
            <td>
                <span class="badge bg-${user.is_active ? 'success' : 'danger'}">
                    ${user.is_active ? 'Active' : 'Inactive'}
                </span>
            </td>
            <td>
                ${user.is_admin ? '<span class="badge bg-warning">Admin</span>' : '-'}
            </td>
            <td>${new Date(user.created_at).toLocaleDateString()}</td>
            <td>
                <div class="btn-group btn-group-sm" role="group">
                    <button type="button" class="btn btn-outline-info" onclick="viewUser(${user.id})" title="View">
                        <i class="fas fa-eye"></i>
                    </button>
                    <button type="button" class="btn btn-outline-primary" onclick="editUser(${user.id})" title="Edit">
                        <i class="fas fa-edit"></i>
                    </button>
                    <button type="button" class="btn btn-outline-danger" onclick="deleteUser(${user.id})" title="Delete">
                        <i class="fas fa-trash"></i>
                    </button>
                </div>
            </td>
        `;
        tbody.appendChild(row);
    });
}

function displayPagination(pagination) {
    const nav = document.getElementById('usersPagination');
    nav.innerHTML = '';
    
    const totalPages = pagination.pages;
    const currentPage = pagination.page;
    
    // Previous button
    const prevItem = document.createElement('li');
    prevItem.className = `page-item ${currentPage === 1 ? 'disabled' : ''}`;
    prevItem.innerHTML = `<a class="page-link" href="#" onclick="loadUsers(${currentPage - 1})">Previous</a>`;
    nav.appendChild(prevItem);
    
    // Page numbers
    for (let i = Math.max(1, currentPage - 2); i <= Math.min(totalPages, currentPage + 2); i++) {
        const item = document.createElement('li');
        item.className = `page-item ${i === currentPage ? 'active' : ''}`;
        item.innerHTML = `<a class="page-link" href="#" onclick="loadUsers(${i})">${i}</a>`;
        nav.appendChild(item);
    }
    
    // Next button
    const nextItem = document.createElement('li');
    nextItem.className = `page-item ${currentPage === totalPages ? 'disabled' : ''}`;
    nextItem.innerHTML = `<a class="page-link" href="#" onclick="loadUsers(${currentPage + 1})">Next</a>`;
    nav.appendChild(nextItem);
}

function searchUsers() {
    currentSearch = document.getElementById('searchInput').value;
    loadUsers(1);
}

function filterUsers(filter) {
    currentFilter = filter;
    // TODO: Implement filtering logic
    loadUsers(1);
}

function showCreateUserModal() {
    document.getElementById('userModalLabel').textContent = 'Add New User';
    document.getElementById('userForm').reset();
    document.getElementById('userId').value = '';
    document.getElementById('passwordRequired').style.display = 'inline';
    document.getElementById('passwordHelp').style.display = 'none';
    document.getElementById('password').required = true;
    new bootstrap.Modal(document.getElementById('userModal')).show();
}

function editUser(userId) {
    fetch(`/admin/api/users/${userId}`)
        .then(response => response.json())
        .then(data => {
            const user = data.user;
            document.getElementById('userModalLabel').textContent = 'Edit User';
            document.getElementById('userId').value = user.id;
            document.getElementById('username').value = user.username;
            document.getElementById('realName').value = user.real_name || '';
            document.getElementById('email').value = user.email || '';
            document.getElementById('fidonetAddress').value = user.fidonet_address || '';
            document.getElementById('isActive').checked = user.is_active;
            document.getElementById('isAdmin').checked = user.is_admin;
            document.getElementById('password').value = '';
            document.getElementById('password').required = false;
            document.getElementById('passwordRequired').style.display = 'none';
            document.getElementById('passwordHelp').style.display = 'block';
            
            new bootstrap.Modal(document.getElementById('userModal')).show();
        })
        .catch(error => {
            console.error('Error loading user:', error);
            showAlert('Error loading user details', 'danger');
        });
}

function viewUser(userId) {
    fetch(`/admin/api/users/${userId}`)
        .then(response => response.json())
        .then(data => {
            const user = data.user;
            const stats = user.stats;
            
            document.getElementById('userDetailsBody').innerHTML = `
                <div class="row">
                    <div class="col-md-6">
                        <h6>User Information</h6>
                        <p><strong>Username:</strong> ${user.username}</p>
                        <p><strong>Real Name:</strong> ${user.real_name || '-'}</p>
                        <p><strong>Email:</strong> ${user.email || '-'}</p>
                        <p><strong>Fidonet Address:</strong> ${user.fidonet_address || '-'}</p>
                        <p><strong>Status:</strong> 
                            <span class="badge bg-${user.is_active ? 'success' : 'danger'}">
                                ${user.is_active ? 'Active' : 'Inactive'}
                            </span>
                            ${user.is_admin ? '<span class="badge bg-warning ms-1">Admin</span>' : ''}
                        </p>
                        <p><strong>Created:</strong> ${new Date(user.created_at).toLocaleString()}</p>
                        <p><strong>Last Login:</strong> ${user.last_login ? new Date(user.last_login).toLocaleString() : 'Never'}</p>
                    </div>
                    <div class="col-md-6">
                        <h6>Statistics</h6>
                        <p><strong>Netmail Received:</strong> ${stats.netmail_received}</p>
                        <p><strong>Netmail Sent:</strong> ${stats.netmail_sent}</p>
                        <p><strong>Echomail Posted:</strong> ${stats.echomail_posted}</p>
                        <p><strong>Active Sessions:</strong> ${stats.active_sessions}</p>
                    </div>
                </div>
            `;
            
            new bootstrap.Modal(document.getElementById('userDetailsModal')).show();
        })
        .catch(error => {
            console.error('Error loading user details:', error);
            showAlert('Error loading user details', 'danger');
        });
}

function saveUser() {
    const form = document.getElementById('userForm');
    const formData = new FormData(form);
    const userId = formData.get('userId');
    
    const userData = {
        username: formData.get('username'),
        real_name: formData.get('real_name'),
        email: formData.get('email'),
        fidonet_address: formData.get('fidonet_address'),
        is_active: formData.has('is_active'),
        is_admin: formData.has('is_admin')
    };
    
    if (formData.get('password')) {
        userData.password = formData.get('password');
    }
    
    const url = userId ? `/admin/api/users/${userId}` : '/admin/api/users';
    const method = userId ? 'PUT' : 'POST';
    
    fetch(url, {
        method: method,
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify(userData)
    })
    .then(response => response.json())
    .then(data => {
        if (data.success || data.user_id) {
            showAlert(userId ? 'User updated successfully' : 'User created successfully', 'success');
            bootstrap.Modal.getInstance(document.getElementById('userModal')).hide();
            loadUsers(currentPage);
        } else {
            showAlert(data.error || 'Error saving user', 'danger');
        }
    })
    .catch(error => {
        console.error('Error saving user:', error);
        showAlert('Error saving user', 'danger');
    });
}

function deleteUser(userId) {
    if (confirm('Are you sure you want to delete this user? This action cannot be undone.')) {
        fetch(`/admin/api/users/${userId}`, {
            method: 'DELETE'
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                showAlert('User deleted successfully', 'success');
                loadUsers(currentPage);
            } else {
                showAlert(data.error || 'Error deleting user', 'danger');
            }
        })
        .catch(error => {
            console.error('Error deleting user:', error);
            showAlert('Error deleting user', 'danger');
        });
    }
}

function showAlert(message, type) {
    const alertDiv = document.createElement('div');
    alertDiv.className = `alert alert-${type} alert-dismissible fade show`;
    alertDiv.innerHTML = `
        ${message}
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    `;
    
    const container = document.querySelector('.container-fluid');
    container.insertBefore(alertDiv, container.firstChild);
    
    setTimeout(() => {
        alertDiv.remove();
    }, 5000);
}
</script>
{% endblock %}