{% extends "base.twig" %}

{% block title %}Echomail{% if echoarea %} - {{ echoarea }}{% endif %} - {{ parent() }}{% endblock %}

{% block content %}
<div class="d-flex justify-content-between align-items-center mb-4">
    <h2>
        <i class="fas fa-comments"></i>
        Echomail
        {% if echoarea %}
            <small class="text-muted">/ {{ echoarea }}</small>
        {% endif %}
    </h2>
    <button class="btn btn-fidonet" onclick="composeMessage('echomail')">
        <i class="fas fa-plus"></i>
        Post Message
    </button>
</div>

<!-- Mobile Echo Areas Accordion -->
<div class="d-lg-none mb-4">
    <div class="accordion" id="mobileEchoAreasAccordion">
        <div class="accordion-item">
            <h2 class="accordion-header" id="echoAreasHeading">
                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#echoAreasCollapse">
                    <i class="fas fa-list me-2"></i>
                    <span id="mobileAccordionText">
                        {% if echoarea %}
                            Viewing: {{ echoarea }}
                        {% else %}
                            Viewing: All Messages  
                        {% endif %}
                    </span>
                </button>
            </h2>
            <div id="echoAreasCollapse" class="accordion-collapse collapse" data-bs-parent="#mobileEchoAreasAccordion">
                <div class="accordion-body p-0">
                    <div style="max-height: 300px; overflow-y: auto;">
                        <div id="mobileEchoareasList">
                            <div class="loading-spinner">
                                <i class="fas fa-spinner fa-spin me-2"></i>
                                Loading areas...
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="row">
    <!-- Messages Column -->
    <div class="col-lg-9">
        <div class="card">
            <div class="card-header">
                <div class="d-flex justify-content-between align-items-center">
                    <h6 class="mb-0">
                        {% if echoarea %}
                            {{ echoarea }} Messages
                        {% else %}
                            Recent Messages
                        {% endif %}
                    </h6>
                    <div class="d-flex align-items-center gap-2">
                        {% if current_user.is_admin %}
                        <div id="bulkActions" class="d-none">
                            <div class="btn-group btn-group-sm" role="group">
                                <button type="button" class="btn btn-outline-danger" onclick="deleteSelectedMessages()">
                                    <i class="fas fa-trash"></i>
                                    Delete Selected (<span id="selectedCount">0</span>)
                                </button>
                                <button type="button" class="btn btn-outline-secondary" onclick="clearSelection()">
                                    Cancel
                                </button>
                            </div>
                        </div>
                        {% endif %}
                        <div class="btn-group btn-group-sm" role="group">
                            {% if current_user.is_admin %}
                            <button type="button" class="btn btn-outline-secondary" onclick="toggleSelectMode()" id="selectModeBtn">
                                <i class="fas fa-check-square"></i>
                                Select
                            </button>
                            {% endif %}
                            <button type="button" class="btn btn-outline-secondary" onclick="refreshMessages()">
                                <i class="fas fa-sync-alt"></i>
                            </button>
                            <button type="button" class="btn btn-outline-secondary dropdown-toggle" data-bs-toggle="dropdown">
                                <i class="fas fa-sort"></i>
                            </button>
                            <ul class="dropdown-menu">
                                <li><a class="dropdown-item" href="#" onclick="sortMessages('date_desc')">Newest First</a></li>
                                <li><a class="dropdown-item" href="#" onclick="sortMessages('date_asc')">Oldest First</a></li>
                                <li><a class="dropdown-item" href="#" onclick="sortMessages('subject')">By Subject</a></li>
                                <li><a class="dropdown-item" href="#" onclick="sortMessages('author')">By Author</a></li>
                                <li><hr class="dropdown-divider"></li>
                                <li><a class="dropdown-item" href="#" onclick="toggleThreading()">
                                    <i class="fas fa-project-diagram"></i>
                                    <span id="threadingToggleText">Show Threaded</span>
                                </a></li>
                            </ul>
                        </div>
                    </div>
                </div>
                <!-- Read/Unread Filter Tabs -->
                <ul class="nav nav-tabs card-header-tabs mt-2">
                    <li class="nav-item">
                        <a class="nav-link active" href="#" onclick="setFilter('all')" id="allTab">
                            <i class="fas fa-list"></i> All Messages
                        </a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="#" onclick="setFilter('unread')" id="unreadTab">
                            <i class="fas fa-envelope"></i> Unread
                            <span class="badge bg-primary ms-1" id="unreadCount">0</span>
                        </a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="#" onclick="setFilter('read')" id="readTab">
                            <i class="far fa-envelope-open"></i> Read
                        </a>
                    </li>
                </ul>
            </div>
            <div class="card-body p-0">
                <div id="messagesContainer">
                    <div class="loading-spinner">
                        <i class="fas fa-spinner fa-spin me-2"></i>
                        Loading messages...
                    </div>
                </div>
            </div>
            <div class="card-footer">
                <nav id="pagination">
                    <!-- Pagination will be inserted here -->
                </nav>
            </div>
        </div>
    </div>
    
    <!-- Echo Areas Sidebar - Hidden on mobile -->
    <div class="col-lg-3 d-none d-lg-block">
        <div class="card">
            <div class="card-header">
                <h6 class="mb-0">Echo Areas</h6>
            </div>
            <div class="card-body p-0" style="max-height: 300px; overflow-y: auto;">
                <div id="echoareasList">
                    <div class="loading-spinner">
                        <i class="fas fa-spinner fa-spin me-2"></i>
                        Loading areas...
                    </div>
                </div>
            </div>
        </div>
        
        <div class="card mt-3">
            <div class="card-header">
                <h6 class="mb-0">Search Messages</h6>
            </div>
            <div class="card-body">
                <div class="mb-3">
                    <input type="text" class="form-control form-control-sm" id="searchInput" placeholder="Search...">
                </div>
                <button class="btn btn-outline-primary btn-sm w-100" onclick="searchMessages()">
                    <i class="fas fa-search"></i>
                    Search
                </button>
            </div>
        </div>

        <div class="card mt-3">
            <div class="card-header">
                <h6 class="mb-0">Statistics</h6>
            </div>
            <div class="card-body">
                <dl class="row mb-0">
                    <dt class="col-6">Total:</dt>
                    <dd class="col-6" id="totalMessages">-</dd>
                    
                    <dt class="col-6">Unread:</dt>
                    <dd class="col-6" id="unreadMessages">-</dd>
                    
                    <dt class="col-6">Recent:</dt>
                    <dd class="col-6" id="recentMessages">-</dd>
                    
                    <dt class="col-6">Areas:</dt>
                    <dd class="col-6" id="totalAreas">-</dd>
                </dl>
            </div>
        </div>
    </div>
</div>

<!-- Message View Modal -->
<div class="modal fade" id="messageModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <div class="d-flex align-items-center gap-2">
                    <button type="button" class="btn btn-outline-secondary btn-sm" id="prevMessageBtn" onclick="navigateMessage(-1)" title="Previous message (←)">
                        <i class="fas fa-chevron-left"></i>
                    </button>
                    <button type="button" class="btn btn-outline-secondary btn-sm" id="nextMessageBtn" onclick="navigateMessage(1)" title="Next message (→)">
                        <i class="fas fa-chevron-right"></i>
                    </button>
                </div>
                <h5 class="modal-title" id="messageSubject">Message</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div id="messageContent">
                    <div class="loading-spinner">
                        <i class="fas fa-spinner fa-spin me-2"></i>
                        Loading message...
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <div class="btn-group">
                    <button type="button" class="btn btn-outline-info" id="shareButton">
                        <i class="fas fa-share-alt"></i>
                        Share
                    </button>
                    <button type="button" class="btn btn-fidonet" id="replyButton">
                        <i class="fas fa-reply"></i>
                        Reply
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Share Modal -->
<div class="modal fade" id="shareModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Share Message</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div class="alert alert-info">
                    <i class="fas fa-info-circle me-2"></i>
                    Share this echomail message with others via a web link.
                </div>
                
                <div class="form-check mb-3">
                    <input class="form-check-input" type="checkbox" id="publicShare">
                    <label class="form-check-label" for="publicShare">
                        <strong>Allow anonymous access</strong>
                        <br><small class="text-muted">Anyone with the link can view without logging in</small>
                    </label>
                </div>
                
                <div class="mb-3" id="shareExpirySection">
                    <label for="shareExpiry" class="form-label">Link expires after:</label>
                    <select class="form-select" id="shareExpiry">
                        <option value="">Never expires</option>
                        <option value="1">1 hour</option>
                        <option value="24">24 hours</option>
                        <option value="168" selected>1 week</option>
                        <option value="720">30 days</option>
                    </select>
                </div>
                
                <div id="shareResult" class="d-none">
                    <label class="form-label">Share URL:</label>
                    <div class="input-group mb-3">
                        <input type="text" class="form-control" id="shareUrl" readonly>
                        <button class="btn btn-outline-secondary" type="button" onclick="copyShareUrl()">
                            <i class="fas fa-copy"></i>
                            Copy
                        </button>
                    </div>
                    
                    <div id="shareExpiryInfo" class="alert alert-info mb-3" style="display: none;">
                        <i class="fas fa-clock me-2"></i>
                        <span id="shareExpiryText"></span>
                    </div>
                    
                    <div id="shareAccessInfo" class="alert alert-secondary mb-3" style="display: none;">
                        <i class="fas fa-chart-bar me-2"></i>
                        <span id="shareAccessText"></span>
                    </div>
                    
                    <div class="alert alert-success">
                        <i class="fas fa-check-circle me-2"></i>
                        Share link created successfully! You can now copy and share this URL.
                    </div>
                </div>
                
                <div id="shareError" class="d-none">
                    <div class="alert alert-danger">
                        <i class="fas fa-exclamation-triangle me-2"></i>
                        <span id="shareErrorMessage"></span>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" id="createShareBtn">
                    <i class="fas fa-share-alt"></i>
                    Create Share Link
                </button>
                <button type="button" class="btn btn-danger d-none" id="revokeShareBtn">
                    <i class="fas fa-trash"></i>
                    Revoke Share
                </button>
            </div>
        </div>
    </div>
</div>
{% endblock %}

{% block scripts %}
<script>
let currentEchoarea = '{{ echoarea }}' || null;
let currentPage = 1;
let currentSort = 'date_desc';
let currentMessageId = null;
let currentFilter = 'all';
let modalClosedByBackButton = false;
let threadedView = false;
let userSettings = {};
let currentMessages = [];
let currentMessageIndex = -1;

$(document).ready(function() {
    loadEchomailSettings().then(function() {
        loadEchoareas();
        loadMessages();
    });
    loadStats();
    
    // Initialize history state
    if (!history.state) {
        history.replaceState({}, '', '');
    }
    
    // Handle browser back button for modal
    window.addEventListener('popstate', function(event) {
        if ($('#messageModal').hasClass('show')) {
            modalClosedByBackButton = true;
            $('#messageModal').modal('hide');
        }
    });
    
    // Handle modal close events
    $('#messageModal').on('hidden.bs.modal', function() {
        // If modal wasn't closed by back button and we're in a modal state, go back in history
        if (!modalClosedByBackButton && history.state && history.state.modal === 'message') {
            history.back();
        }
        modalClosedByBackButton = false;
    });
    
    // Add keyboard navigation for message modal
    $(document).on('keydown', function(e) {
        // Only handle keyboard shortcuts when the message modal is open
        if ($('#messageModal').hasClass('show')) {
            switch(e.key) {
                case 'ArrowLeft':
                    e.preventDefault();
                    navigateMessage(-1);
                    break;
                case 'ArrowRight':
                    e.preventDefault();
                    navigateMessage(1);
                    break;
                case 'Escape':
                    // Let the default modal behavior handle this
                    break;
            }
        }
    });
    
    // Add touch/swipe navigation for message modal
    setupModalSwipeNavigation();
    
    // Initialize mobile accordion text
    updateMobileAccordionText(currentEchoarea);
    
    // Search on enter key
    $('#searchInput').on('keypress', function(e) {
        if (e.which === 13) {
            searchMessages();
        }
    });
    
    // Auto refresh every 5 minutes
    startAutoRefresh(function() {
        loadMessages();
        loadStats();
    }, 300000);
});

function loadEchoareas() {
    $.get('/api/echoareas')
        .done(function(data) {
            displayEchoareas(data.echoareas);
            displayMobileEchoareas(data.echoareas);
        })
        .fail(function() {
            $('#echoareasList').html('<div class="text-center text-danger p-3">Failed to load echo areas</div>');
            $('#mobileEchoareasList').html('<div class="text-center text-danger p-3">Failed to load echo areas</div>');
        });
}

function displayEchoareas(echoareas) {
    const container = $('#echoareasList');
    let html = '';
    
    if (echoareas && echoareas.length > 0) {
        // All messages option
        html += `
            <div class="node-item ${!currentEchoarea ? 'bg-primary text-white' : ''}" onclick="selectEchoarea(null)">
                <div class="d-flex justify-content-between align-items-center">
                    <div>
                        <div class="node-system">All Messages</div>
                        <small class="text-muted">View all echo areas</small>
                    </div>
                    <span class="badge bg-secondary">All</span>
                </div>
            </div>
        `;
        
        echoareas.forEach(function(area) {
            const isActive = currentEchoarea === area.tag;
            html += `
                <div class="node-item ${isActive ? 'bg-primary text-white' : ''}" onclick="selectEchoarea('${area.tag}')">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <div class="node-address">${area.tag}</div>
                            <div class="node-system">${escapeHtml(area.description)}</div>
                        </div>
                        <span class="badge ${isActive ? 'bg-light text-dark' : 'bg-secondary'}">${area.message_count || 0}</span>
                    </div>
                </div>
            `;
        });
    } else {
        html = '<div class="text-center text-muted p-3">No echo areas available</div>';
    }
    
    container.html(html);
}

function displayMobileEchoareas(echoareas) {
    const container = $('#mobileEchoareasList');
    let html = '';
    
    if (echoareas && echoareas.length > 0) {
        // All messages option
        html += `
            <div class="list-group-item list-group-item-action ${!currentEchoarea ? 'active' : ''}" onclick="selectEchoarea(null)">
                <div class="d-flex justify-content-between align-items-center">
                    <div>
                        <div class="fw-bold">All Messages</div>
                        <small class="text-muted">View all echo areas</small>
                    </div>
                    <span class="badge bg-secondary">All</span>
                </div>
            </div>
        `;
        
        echoareas.forEach(function(area) {
            const isActive = currentEchoarea === area.tag;
            html += `
                <div class="list-group-item list-group-item-action ${isActive ? 'active' : ''}" onclick="selectEchoarea('${area.tag}')">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <div class="fw-bold">${area.tag}</div>
                            <div class="text-muted small">${escapeHtml(area.description)}</div>
                        </div>
                        <span class="badge bg-secondary">${area.message_count || 0}</span>
                    </div>
                </div>
            `;
        });
        
        // Wrap in list-group
        html = '<div class="list-group list-group-flush">' + html + '</div>';
    } else {
        html = '<div class="text-center text-muted p-3">No echo areas available</div>';
    }
    
    container.html(html);
}

function selectEchoarea(tag) {
    currentEchoarea = tag;
    currentPage = 1;
    
    // Update URL without page reload
    const url = tag ? `/echomail/${encodeURIComponent(tag)}` : '/echomail';
    history.pushState({echoarea: tag}, '', url);
    
    // Update title
    const title = tag ? `Echomail - ${tag}` : 'Echomail';
    $('h2 small').remove();
    if (tag) {
        $('h2').append(`<small class="text-muted">/ ${tag}</small>`);
    }
    
    // Update mobile accordion text
    updateMobileAccordionText(tag);
    
    // Collapse mobile accordion after selection
    $('#echoAreasCollapse').collapse('hide');
    
    loadEchoareas(); // Refresh to show active state
    loadMessages();
}

function loadMessages() {
    showLoading('#messagesContainer');
    
    let url = '/api/messages/echomail';
    if (currentEchoarea) {
        url += `/${encodeURIComponent(currentEchoarea)}`;
    }
    url += `?page=${currentPage}&sort=${currentSort}&filter=${currentFilter}`;
    if (threadedView) {
        url += '&threaded=true';
    }
    
    $.get(url)
        .done(function(data) {
            displayMessages(data.messages, data.threaded || false);
            updatePagination(data.pagination);
            updateUnreadCount(data.unreadCount || 0);
        })
        .fail(function() {
            $('#messagesContainer').html('<div class="text-center text-danger py-4">Failed to load messages</div>');
        });
}

function displayMessages(messages, isThreaded = false) {
    const container = $('#messagesContainer');
    let html = '';
    
    // Store current messages for navigation
    currentMessages = messages;
    
    if (messages.length === 0) {
        html = '<div class="text-center text-muted py-4">No messages found</div>';
    } else {
        // Create table structure
        html = `
            <div class="table-responsive">
                <table class="table table-hover message-table mb-0">
                    <thead>
                        <tr>
                            <th style="width: 5%" id="selectAllColumn" class="d-none">
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" id="selectAllMessages" onchange="toggleSelectAll()">
                                </div>
                            </th>
                            <th style="width: 25%">From</th>
                            <th style="width: 60%">Subject</th>
                            <th colspan="2" style="width: 15%">Received</th>

                        </tr>
                    </thead>
                    <tbody>
        `;
        
        messages.forEach(function(msg) {
            // Check if message is addressed to current user
            const currentUserName = '{{ current_user.real_name or current_user.username }}';
            const isToCurrentUser = msg.to_name && msg.to_name === currentUserName;
            const toInfo = msg.to_name && msg.to_name !== 'All' ? 
                ` (to: <span class="${isToCurrentUser ? 'text-purple fw-bold' : ''}">${escapeHtml(msg.to_name)}</span>)` : '';
            const isRead = msg.is_read == 1;
            const isShared = msg.is_shared == 1;
            const readClass = isRead ? 'read' : 'unread';
            const readIcon = isRead ? '<i class="fas fa-envelope-open text-muted me-1" title="Read"></i>' : '<i class="fas fa-envelope text-primary me-1" title="Unread"></i>';
            const shareIcon = isShared ? '<i class="fas fa-share-alt text-success me-1" title="Shared"></i>' : '';
            
            // Threading support
            const threadLevel = msg.thread_level || 0;
            const replyCount = msg.reply_count || 0;
            const isThreadRoot = msg.is_thread_root || false;
            const threadIcon = threadLevel > 0 ? '<i class="fas fa-reply me-1 text-muted" title="Reply"></i>' : '';
            const replyCountBadge = isThreadRoot && replyCount > 0 ? ` <span class="badge bg-secondary ms-1" title="${replyCount} replies">${replyCount}</span>` : '';
            
            // Add thread-specific CSS classes
            const threadClasses = isThreaded ? `thread-level-${threadLevel} ${isThreadRoot ? 'thread-root' : 'thread-reply'}` : '';
            
            html += `
                <tr class="message-row ${readClass} ${threadClasses}" data-message-id="${msg.id}">
                    <td class="message-checkbox d-none">
                        <div class="form-check">
                            <input class="form-check-input message-select" type="checkbox" value="${msg.id}" onchange="updateSelection()">
                        </div>
                    </td>
                    <td class="message-from clickable-cell" onclick="viewMessage(${msg.id})" style="cursor: pointer;">
                        ${threadIcon}${readIcon}${shareIcon}${escapeHtml(msg.from_name)}
                    </td>
                    <td class="message-subject clickable-cell" onclick="viewMessage(${msg.id})" style="cursor: pointer;">
                        ${!currentEchoarea ? `<div class="mb-1">
                            <span class="badge" style="background-color: ${msg.echoarea_color || '#28a745'}; color: white;">${msg.echoarea}</span>
                        </div>` : ''}
                        ${isRead ? '' : '<strong>'}${escapeHtml(msg.subject || '(No Subject)')}${isRead ? '' : '</strong>'}${replyCountBadge}
                        ${toInfo ? `<br><small class="text-muted">${toInfo}</small>` : ''}
                    </td>
                    <td class="message-date clickable-cell" onclick="viewMessage(${msg.id})" style="cursor: pointer;" title="Written date: ${formatFullDate(msg.date_written)}">${formatDate(msg.date_received)}</td>
                </tr>
            `;
        });
        
        html += `
                    </tbody>
                </table>
            </div>
        `;
    }
    
    container.html(html);
}

function updatePagination(pagination) {
    const container = $('#pagination');
    let html = '';
    
    if (pagination.pages > 1) {
        html = '<ul class="pagination pagination-sm mb-0">';
        
        // Previous button
        if (pagination.page > 1) {
            html += `<li class="page-item"><a class="page-link" href="#" onclick="changePage(${pagination.page - 1})">Previous</a></li>`;
        }
        
        // Page numbers (show max 5 pages)
        let startPage = Math.max(1, pagination.page - 2);
        let endPage = Math.min(pagination.pages, startPage + 4);
        
        if (endPage - startPage < 4) {
            startPage = Math.max(1, endPage - 4);
        }
        
        for (let i = startPage; i <= endPage; i++) {
            const active = i === pagination.page ? 'active' : '';
            html += `<li class="page-item ${active}"><a class="page-link" href="#" onclick="changePage(${i})">${i}</a></li>`;
        }
        
        // Next button
        if (pagination.page < pagination.pages) {
            html += `<li class="page-item"><a class="page-link" href="#" onclick="changePage(${pagination.page + 1})">Next</a></li>`;
        }
        
        html += '</ul>';
    }
    
    container.html(html);
}

function changePage(page) {
    currentPage = page;
    loadMessages();
}

function sortMessages(sortBy) {
    currentSort = sortBy;
    currentPage = 1;
    
    // Save sort preference
    window.saveUserSetting('default_sort', sortBy);
    
    loadMessages();
}

function refreshMessages() {
    loadMessages();
    showSuccess('Messages refreshed');
}

function toggleThreading() {
    threadedView = !threadedView;
    currentPage = 1; // Reset to first page when toggling
    
    // Update toggle text
    const toggleText = $('#threadingToggleText');
    if (threadedView) {
        toggleText.text('Show Flat');
    } else {
        toggleText.text('Show Threaded');
    }
    
    // Save preference
    window.saveUserSetting('threaded_view', threadedView);
    
    loadMessages();
}

function setFilter(filter) {
    currentFilter = filter;
    currentPage = 1;
    updateFilterTabs();
    loadMessages();
}

function updateFilterTabs() {
    // Remove active class from all tabs
    $('.nav-tabs .nav-link').removeClass('active');
    
    // Add active class to current tab
    if (currentFilter === 'all') {
        $('#allTab').addClass('active');
    } else if (currentFilter === 'unread') {
        $('#unreadTab').addClass('active');
    } else if (currentFilter === 'read') {
        $('#readTab').addClass('active');
    }
}

function updateUnreadCount(count) {
    $('#unreadCount').text(count);
}

function markEchomailAsRead(messageId) {
    $.post(`/api/messages/echomail/${messageId}/read`)
        .done(function() {
            // Update the UI to show message as read
            const messageRow = $(`.message-row[data-message-id="${messageId}"]`);
            if (messageRow.length) {
                messageRow.removeClass('unread').addClass('read');
                // Change envelope icon from closed to open
                messageRow.find('.fa-envelope').removeClass('fas fa-envelope text-primary').addClass('fas fa-envelope-open text-muted');
                // Remove bold formatting from subject
                messageRow.find('strong').contents().unwrap();
                // Update title attribute
                messageRow.find('.fa-envelope-open').attr('title', 'Read');
            }
        })
        .fail(function() {
            console.log('Failed to mark echomail as read');
        });
}

function viewMessage(messageId) {
    currentMessageId = messageId;
    
    // Find the current message index in the messages array
    currentMessageIndex = currentMessages.findIndex(msg => msg.id == messageId);
    
    // Update navigation button states
    updateNavigationButtons();
    
    // Add history entry for mobile back button support
    if (!history.state || history.state.modal !== 'message') {
        history.pushState({modal: 'message', messageId: messageId}, '', '');
    }
    
    // Mark as read immediately
    markEchomailAsRead(messageId);
    
    $('#messageContent').html(`
        <div class="loading-spinner">
            <i class="fas fa-spinner fa-spin me-2"></i>
            Loading message...
        </div>
    `);
    
    $('#messageModal').modal('show');
    
    // Choose the appropriate API endpoint based on whether we have a specific echoarea
    let apiUrl;
    if (currentEchoarea) {
        apiUrl = `/api/messages/echomail/${encodeURIComponent(currentEchoarea)}/${messageId}`;
    } else {
        apiUrl = `/api/messages/echomail/message/${messageId}`;
    }
    
    $.get(apiUrl)
        .done(function(data) {
            displayMessageContent(data);
            // Auto-scroll to top of modal content
            $('#messageModal .modal-body').scrollTop(0);
        })
        .fail(function() {
            $('#messageContent').html('<div class="text-danger">Failed to load message</div>');
        });
}

function displayMessageContent(message) {
    updateModalTitle(message.subject);
    
    // Parse message to separate kludge lines from body
    const parsedMessage = parseEchomailMessage(message.message_text || '', message.kludge_lines || '');
    
    const html = `
        <div class="message-header-full mb-3">
            <div class="row">
                <div class="col-md-6">
                    <strong>From:</strong> ${escapeHtml(message.from_name)}<br>
                    <small class="text-muted">${formatFidonetAddress(message.from_address)}</small>
                </div>
                <div class="col-md-6">
                    <strong>To:</strong> ${escapeHtml(message.to_name || 'All')}<br>
                    <span class="badge" style="background-color: ${message.echoarea_color || '#28a745'}; color: white;">${message.echoarea}</span>
                </div>
            </div>
            <div class="row mt-2">
                <div class="col-md-6">
                    <strong>Date:</strong> ${formatFullDate(message.date_written)}
                </div>
                <div class="col-md-6">
                    <strong>Subject:</strong> ${escapeHtml(message.subject || '(No Subject)')}
                </div>
            </div>
        </div>
        
        <div class="message-headers mb-3">
            <div class="d-flex justify-content-between align-items-center mb-2">
                <h6 class="mb-0 text-muted">Message Headers</h6>
                <button class="btn btn-sm btn-outline-secondary" id="toggleHeaders" onclick="toggleKludgeLines()">
                    <i class="fas fa-eye-slash" id="toggleIcon"></i>
                    <span id="toggleText">Show Headers</span>
                </button>
            </div>
            <div id="kludgeContainer" class="kludge-lines" style="display: none;">
                <pre class="bg-dark text-light p-3 rounded small">${parsedMessage.kludgeLines.length > 0 ? formatKludgeLines(parsedMessage.kludgeLines) : 'No headers found'}</pre>
            </div>
        </div>
        
        <div class="message-text">
            ${formatMessageText(parsedMessage.messageBody)}
        </div>
        ${message.origin_line ? `<div class="message-origin mt-2"><small class="text-muted">${escapeHtml(message.origin_line)}</small></div>` : ''}
    `;
    
    $('#messageContent').html(html);
    
    // Set up reply button
    $('#replyButton').show().off('click').on('click', function() {
        $('#messageModal').modal('hide');
        composeMessage('echomail', currentMessageId);
    });
    
    // Set up share button
    $('#shareButton').show().off('click').on('click', function() {
        showShareDialog(currentMessageId);
    });
}

function composeMessage(type, replyToId = null) {
    let url = `/compose/echomail`;
    const params = new URLSearchParams();
    
    if (replyToId) {
        params.append('reply', replyToId);
    }
    if (currentEchoarea) {
        params.append('echoarea', currentEchoarea);
    }
    
    if (params.toString()) {
        url += '?' + params.toString();
    }
    
    window.location.href = url;
}

function searchMessages() {
    const query = $('#searchInput').val().trim();
    if (query.length < 2) {
        showError('Please enter at least 2 characters to search');
        return;
    }
    
    showLoading('#messagesContainer');
    
    let url = `/api/messages/search?q=${encodeURIComponent(query)}&type=echomail`;
    if (currentEchoarea) {
        url += `&echoarea=${encodeURIComponent(currentEchoarea)}`;
    }
    
    $.get(url)
        .done(function(data) {
            displayMessages(data.messages);
            $('#pagination').empty();
        })
        .fail(function() {
            showError('Search failed');
        });
}

// Handle browser back/forward
window.addEventListener('popstate', function(event) {
    if (event.state && event.state.echoarea !== undefined) {
        currentEchoarea = event.state.echoarea;
        loadEchoareas();
        loadMessages();
    }
});

function loadStats() {
    console.log('Loading echomail statistics...');
    let url = '/api/messages/echomail/stats';
    if (currentEchoarea) {
        url += '/' + encodeURIComponent(currentEchoarea);
    }
    
    $.get(url)
        .done(function(data) {
            console.log('Echomail stats response:', data);
            $('#totalMessages').text(data.total || 0);
            $('#unreadMessages').text(data.unread || 0);
            $('#recentMessages').text(data.recent || 0);
            
            if (data.areas !== undefined) {
                $('#totalAreas').text(data.areas || 0);
            } else {
                $('#totalAreas').text('-');
            }
        })
        .fail(function(xhr, status, error) {
            console.error('Echomail stats loading failed:', xhr.status, status, error);
            console.error('Response text:', xhr.responseText);
            $('#totalMessages').text('Error');
            $('#unreadMessages').text('Error');
            $('#recentMessages').text('Error');
            $('#totalAreas').text('Error');
        });
}

// Selection and bulk operations functionality
let selectMode = false;
let selectedMessages = new Set();

function toggleSelectMode() {
    selectMode = !selectMode;
    const btn = $('#selectModeBtn');
    const checkboxColumn = $('#selectAllColumn');
    const checkboxCells = $('.message-checkbox');
    const bulkActions = $('#bulkActions');
    
    if (selectMode) {
        // Enable select mode
        btn.html('<i class="fas fa-times"></i> Cancel');
        btn.removeClass('btn-outline-secondary').addClass('btn-outline-warning');
        checkboxColumn.removeClass('d-none');
        checkboxCells.removeClass('d-none');
        bulkActions.removeClass('d-none');
    } else {
        // Disable select mode
        btn.html('<i class="fas fa-check-square"></i> Select');
        btn.removeClass('btn-outline-warning').addClass('btn-outline-secondary');
        checkboxColumn.addClass('d-none');
        checkboxCells.addClass('d-none');
        bulkActions.addClass('d-none');
        clearSelection();
    }
}

function toggleSelectAll() {
    const selectAllCheckbox = $('#selectAllMessages');
    const messageCheckboxes = $('.message-select');
    
    if (selectAllCheckbox.prop('checked')) {
        messageCheckboxes.prop('checked', true);
        messageCheckboxes.each(function() {
            selectedMessages.add(parseInt($(this).val()));
        });
    } else {
        messageCheckboxes.prop('checked', false);
        selectedMessages.clear();
    }
    
    updateSelectionDisplay();
}

function updateSelection() {
    const messageCheckboxes = $('.message-select');
    const checkedBoxes = $('.message-select:checked');
    
    // Update selected messages set
    selectedMessages.clear();
    checkedBoxes.each(function() {
        selectedMessages.add(parseInt($(this).val()));
    });
    
    // Update select all checkbox
    const selectAllCheckbox = $('#selectAllMessages');
    if (checkedBoxes.length === 0) {
        selectAllCheckbox.prop('indeterminate', false);
        selectAllCheckbox.prop('checked', false);
    } else if (checkedBoxes.length === messageCheckboxes.length) {
        selectAllCheckbox.prop('indeterminate', false);
        selectAllCheckbox.prop('checked', true);
    } else {
        selectAllCheckbox.prop('indeterminate', true);
        selectAllCheckbox.prop('checked', false);
    }
    
    updateSelectionDisplay();
}

function updateSelectionDisplay() {
    const count = selectedMessages.size;
    $('#selectedCount').text(count);
    
    if (count === 0) {
        $('#bulkActions .btn-outline-danger').prop('disabled', true);
    } else {
        $('#bulkActions .btn-outline-danger').prop('disabled', false);
    }
}

function clearSelection() {
    selectedMessages.clear();
    $('.message-select').prop('checked', false);
    $('#selectAllMessages').prop('checked', false).prop('indeterminate', false);
    updateSelectionDisplay();
    
    if (selectMode) {
        toggleSelectMode();
    }
}

function deleteSelectedMessages() {
    {% if not current_user.is_admin %}
    showError('Admin privileges required to delete echomail messages');
    return;
    {% endif %}
    
    if (selectedMessages.size === 0) {
        showError('No messages selected');
        return;
    }
    
    const count = selectedMessages.size;
    const confirmMessage = `Are you sure you want to delete ${count} selected message${count > 1 ? 's' : ''}?`;
    
    if (!confirm(confirmMessage)) {
        return;
    }
    
    // Convert Set to Array for API call
    const messageIds = Array.from(selectedMessages);
    
    // Show loading state
    const deleteBtn = $('#bulkActions .btn-outline-danger');
    const originalText = deleteBtn.html();
    deleteBtn.prop('disabled', true).html('<i class="fas fa-spinner fa-spin"></i> Deleting...');
    
    $.ajax({
        url: '/api/messages/echomail/delete',
        type: 'POST',
        data: JSON.stringify({ messageIds: messageIds }),
        contentType: 'application/json',
        success: function(response) {
            if (response.success) {
                showSuccess(response.message);
                clearSelection();
                loadMessages(); // Reload messages
                loadStats(); // Update statistics
            } else {
                showError(response.error || 'Failed to delete messages');
            }
        },
        error: function(xhr) {
            let errorMessage = 'Failed to delete messages';
            try {
                const response = JSON.parse(xhr.responseText);
                errorMessage = response.error || errorMessage;
            } catch (e) {
                // Use default error message
            }
            showError(errorMessage);
        },
        complete: function() {
            deleteBtn.prop('disabled', false).html(originalText);
        }
    });
}

// Mark message as read when viewed
function markMessageAsRead(messageId) {
    $.post(`/api/messages/echomail/${messageId}/read`)
        .done(function() {
            // Update the UI to show message as read
            const messageRow = $(`.message-row[data-message-id="${messageId}"]`);
            messageRow.removeClass('unread').addClass('read');
            messageRow.find('.fa-envelope').removeClass('fas fa-envelope text-primary').addClass('fas fa-envelope-open text-muted');
            messageRow.find('.message-subject strong').contents().unwrap();
            messageRow.css('opacity', '0.85');
        })
        .fail(function() {
            console.log('Failed to mark message as read');
        });
}

// Update viewMessage function to mark as read
const originalViewMessage = window.viewMessage;
window.viewMessage = function(id) {
    markMessageAsRead(id);
    if (originalViewMessage) {
        originalViewMessage(id);
    }
};

function updateMobileAccordionText(selectedArea) {
    const textSpan = $('#mobileAccordionText');
    if (textSpan.length) {
        if (selectedArea) {
            textSpan.text(`Viewing: ${selectedArea}`);
        } else {
            textSpan.text('Viewing: All Messages');
        }
    }
}

function updateNavigationButtons() {
    const prevBtn = $('#prevMessageBtn');
    const nextBtn = $('#nextMessageBtn');
    
    // Disable/enable buttons based on current position
    if (currentMessageIndex <= 0) {
        prevBtn.prop('disabled', true);
    } else {
        prevBtn.prop('disabled', false);
    }
    
    if (currentMessageIndex >= currentMessages.length - 1) {
        nextBtn.prop('disabled', true);
    } else {
        nextBtn.prop('disabled', false);
    }
}

function updateModalTitle(subject) {
    const position = currentMessages.length > 0 ? `${currentMessageIndex + 1} of ${currentMessages.length}` : '';
    const titleText = subject || '(No Subject)';
    
    if (position) {
        $('#messageSubject').html(`${escapeHtml(titleText)} <small class="text-muted">(${position})</small>`);
    } else {
        $('#messageSubject').text(titleText);
    }
}

function setupModalSwipeNavigation() {
    let touchStartX = 0;
    let touchStartY = 0;
    let touchEndX = 0;
    let touchEndY = 0;
    let isDragging = false;
    
    const modal = document.getElementById('messageModal');
    
    // Touch start
    modal.addEventListener('touchstart', function(e) {
        // Only handle if modal is visible
        if (!$('#messageModal').hasClass('show')) return;
        
        touchStartX = e.touches[0].clientX;
        touchStartY = e.touches[0].clientY;
        isDragging = false;
    }, { passive: true });
    
    // Touch move - track dragging to avoid accidental swipes during scrolling
    modal.addEventListener('touchmove', function(e) {
        if (!$('#messageModal').hasClass('show')) return;
        
        const currentX = e.touches[0].clientX;
        const currentY = e.touches[0].clientY;
        
        const deltaX = Math.abs(currentX - touchStartX);
        const deltaY = Math.abs(currentY - touchStartY);
        
        // If we're moving more horizontally than vertically, we might be swiping
        if (deltaX > deltaY && deltaX > 10) {
            isDragging = true;
        }
    }, { passive: true });
    
    // Touch end - determine if it was a swipe
    modal.addEventListener('touchend', function(e) {
        if (!$('#messageModal').hasClass('show')) return;
        
        touchEndX = e.changedTouches[0].clientX;
        touchEndY = e.changedTouches[0].clientY;
        
        handleSwipe();
    }, { passive: true });
    
    function handleSwipe() {
        const deltaX = touchEndX - touchStartX;
        const deltaY = touchEndY - touchStartY;
        const absDeltaX = Math.abs(deltaX);
        const absDeltaY = Math.abs(deltaY);
        
        // Minimum swipe distance (in pixels)
        const minSwipeDistance = 50;
        
        // Must be more horizontal than vertical movement
        // And must exceed minimum distance
        if (absDeltaX > absDeltaY && absDeltaX > minSwipeDistance) {
            if (deltaX > 0) {
                // Swipe right - go to previous message
                navigateMessage(-1);
            } else {
                // Swipe left - go to next message  
                navigateMessage(1);
            }
        }
        
        // Reset values
        touchStartX = 0;
        touchStartY = 0;
        touchEndX = 0;
        touchEndY = 0;
        isDragging = false;
    }
}

function navigateMessage(direction) {
    if (currentMessages.length === 0) return;
    
    const newIndex = currentMessageIndex + direction;
    
    // Check bounds
    if (newIndex < 0 || newIndex >= currentMessages.length) {
        return;
    }
    
    // Get the new message
    const newMessage = currentMessages[newIndex];
    if (!newMessage) return;
    
    // Update current message info
    currentMessageId = newMessage.id;
    currentMessageIndex = newIndex;
    
    // Update navigation buttons
    updateNavigationButtons();
    
    // Mark as read immediately
    markEchomailAsRead(newMessage.id);
    
    // Show loading
    $('#messageContent').html(`
        <div class="loading-spinner">
            <i class="fas fa-spinner fa-spin me-2"></i>
            Loading message...
        </div>
    `);
    
    // Load the new message
    let apiUrl;
    if (currentEchoarea) {
        apiUrl = `/api/messages/echomail/${encodeURIComponent(currentEchoarea)}/${newMessage.id}`;
    } else {
        apiUrl = `/api/messages/echomail/message/${newMessage.id}`;
    }
    
    $.get(apiUrl)
        .done(function(data) {
            displayMessageContent(data);
            // Auto-scroll to top of modal content
            $('#messageModal .modal-body').scrollTop(0);
        })
        .fail(function() {
            $('#messageContent').html('<div class="text-danger">Failed to load message</div>');
        });
}


// Sharing functionality
function showShareDialog(messageId) {
    currentMessageId = messageId;
    
    // Reset modal state
    $('#shareResult').addClass('d-none');
    $('#shareError').addClass('d-none');
    $('#shareExpiryInfo').hide();
    $('#shareAccessInfo').hide();
    $('#shareExpirySection').show(); // Show expiry dropdown for new shares
    $('#createShareBtn').removeClass('d-none');
    $('#revokeShareBtn').addClass('d-none');
    $('#publicShare').prop('checked', false);
    $('#shareExpiry').val('168');
    
    // Check if message is already shared
    $.get(`/api/messages/echomail/${messageId}/shares`)
        .done(function(data) {
            if (data.shares && data.shares.length > 0) {
                // Show existing share
                const share = data.shares[0];
                $('#shareUrl').val(share.share_url);
                $('#shareResult').removeClass('d-none');
                $('#shareExpirySection').hide(); // Hide expiry dropdown for existing shares
                $('#createShareBtn').addClass('d-none');
                $('#revokeShareBtn').removeClass('d-none');
                $('#publicShare').prop('checked', share.is_public);
                
                // Show expiry information
                if (share.expires_at) {
                    const expiresDate = new Date(share.expires_at);
                    const now = new Date();
                    const createdDate = new Date(share.created_at);
                    
                    // Calculate time remaining
                    if (expiresDate > now) {
                        const diffMs = expiresDate - now;
                        const diffHours = Math.ceil(diffMs / (1000 * 60 * 60));
                        const diffDays = Math.ceil(diffMs / (1000 * 60 * 60 * 24));
                        
                        let expiryText;
                        if (diffHours < 24) {
                            expiryText = `Expires in ${diffHours} hour${diffHours !== 1 ? 's' : ''}`;
                        } else {
                            expiryText = `Expires in ${diffDays} day${diffDays !== 1 ? 's' : ''} (${expiresDate.toLocaleString()})`;
                        }
                        $('#shareExpiryText').text(expiryText);
                        $('#shareExpiryInfo').show().removeClass('alert-warning').addClass('alert-info');
                    } else {
                        $('#shareExpiryText').text('This share link has expired');
                        $('#shareExpiryInfo').show().removeClass('alert-info').addClass('alert-warning');
                    }
                    
                    // Set expiry dropdown to match current settings for editing
                    const diffHours = Math.round((expiresDate - createdDate) / (1000 * 60 * 60));
                    $('#shareExpiry').val(diffHours.toString());
                } else {
                    $('#shareExpiryText').text('This link never expires');
                    $('#shareExpiryInfo').show().removeClass('alert-warning').addClass('alert-info');
                    $('#shareExpiry').val('');
                }
                
                // Show access information
                const accessCount = share.access_count || 0;
                const lastAccessed = share.last_accessed_at ? new Date(share.last_accessed_at).toLocaleString() : 'Never';
                $('#shareAccessText').text(`Accessed ${accessCount} time${accessCount !== 1 ? 's' : ''}. Last accessed: ${lastAccessed}`);
                $('#shareAccessInfo').show();
            }
            $('#shareModal').modal('show');
        })
        .fail(function() {
            showError('Failed to check existing shares');
        });
}

function createShare() {
    const publicShare = $('#publicShare').is(':checked');
    const expiryHours = $('#shareExpiry').val();
    
    // Disable button and show loading
    const btn = $('#createShareBtn');
    const originalText = btn.html();
    btn.prop('disabled', true).html('<i class="fas fa-spinner fa-spin"></i> Creating...');
    
    // Hide previous errors
    $('#shareError').addClass('d-none');
    
    $.ajax({
        url: `/api/messages/echomail/${currentMessageId}/share`,
        method: 'POST',
        data: JSON.stringify({
            public: publicShare,
            expires_hours: expiryHours || null
        }),
        contentType: 'application/json',
        success: function(data) {
            if (data.success) {
                $('#shareUrl').val(data.share_url);
                $('#shareResult').removeClass('d-none');
                $('#createShareBtn').addClass('d-none');
                $('#revokeShareBtn').removeClass('d-none');
                
                if (data.existing) {
                    showSuccess('Using existing share link');
                } else {
                    showSuccess('Share link created successfully!');
                }
            } else {
                $('#shareErrorMessage').text(data.error || 'Failed to create share link');
                $('#shareError').removeClass('d-none');
            }
        },
        error: function(xhr) {
            let errorMessage = 'Failed to create share link';
            try {
                const response = JSON.parse(xhr.responseText);
                errorMessage = response.error || errorMessage;
            } catch (e) {
                // Use default error message
            }
            $('#shareErrorMessage').text(errorMessage);
            $('#shareError').removeClass('d-none');
        },
        complete: function() {
            btn.prop('disabled', false).html(originalText);
        }
    });
}

function revokeShare() {
    if (!confirm('Are you sure you want to revoke this share link? It will no longer be accessible to others.')) {
        return;
    }
    
    const btn = $('#revokeShareBtn');
    const originalText = btn.html();
    btn.prop('disabled', true).html('<i class="fas fa-spinner fa-spin"></i> Revoking...');
    
    $.ajax({
        url: `/api/messages/echomail/${currentMessageId}/share`,
        method: 'DELETE',
        success: function(data) {
            if (data.success) {
                $('#shareResult').addClass('d-none');
                $('#createShareBtn').removeClass('d-none');
                $('#revokeShareBtn').addClass('d-none');
                showSuccess('Share link revoked');
            } else {
                showError(data.error || 'Failed to revoke share link');
            }
        },
        error: function() {
            showError('Failed to revoke share link');
        },
        complete: function() {
            btn.prop('disabled', false).html(originalText);
        }
    });
}

function copyShareUrl() {
    const shareUrl = $('#shareUrl').val();
    
    if (navigator.clipboard && navigator.clipboard.writeText) {
        navigator.clipboard.writeText(shareUrl).then(function() {
            showSuccess('Share URL copied to clipboard!');
            
            // Briefly highlight the input field
            $('#shareUrl').select();
        }).catch(function() {
            // Fallback for older browsers
            fallbackCopyTextToClipboard(shareUrl);
        });
    } else {
        // Fallback for older browsers
        fallbackCopyTextToClipboard(shareUrl);
    }
}

function fallbackCopyTextToClipboard(text) {
    const textArea = document.createElement('textarea');
    textArea.value = text;
    
    // Avoid scrolling to bottom
    textArea.style.top = '0';
    textArea.style.left = '0';
    textArea.style.position = 'fixed';
    
    document.body.appendChild(textArea);
    textArea.focus();
    textArea.select();
    
    try {
        const successful = document.execCommand('copy');
        if (successful) {
            showSuccess('Share URL copied to clipboard!');
        } else {
            showError('Copy to clipboard failed. Please copy manually.');
        }
    } catch (err) {
        showError('Copy to clipboard not supported. Please copy manually.');
    }
    
    document.body.removeChild(textArea);
}

// Event handlers for share modal
$(document).ready(function() {
    $('#createShareBtn').on('click', createShare);
    $('#revokeShareBtn').on('click', revokeShare);
    
    // Reset modal when closed
    $('#shareModal').on('hidden.bs.modal', function() {
        $('#shareResult').addClass('d-none');
        $('#shareError').addClass('d-none');
        $('#createShareBtn').removeClass('d-none');
        $('#revokeShareBtn').addClass('d-none');
    });
});

// User settings functions - apply echomail-specific settings after loading
function loadEchomailSettings() {
    if (typeof window.loadUserSettings === 'function') {
        return window.loadUserSettings().then(function() {
            // Apply echomail-specific settings
            userSettings = window.userSettings;
            
            if (userSettings.threaded_view !== undefined) {
                threadedView = userSettings.threaded_view;
                const toggleText = $('#threadingToggleText');
                if (threadedView) {
                    toggleText.text('Show Flat');
                } else {
                    toggleText.text('Show Threaded');
                }
            }
            
            if (userSettings.default_sort) {
                currentSort = userSettings.default_sort;
            }
        });
    } else {
        // Fallback if global function not available
        return Promise.resolve();
    }
}

// Use global settings functions directly - no local wrappers needed
// All calls to saveUserSetting and saveUserSettings will use window.* functions

</script>

<style>
/* Read/Unread message styling */
.message-row.unread {
    background-color: #f8f9fa;
}

/* Echoarea badge styling in subject column */
.message-subject .badge {
    font-size: 0.75rem;
    margin-bottom: 0.25rem;
}

.message-row.unread .message-from,
.message-row.unread .message-subject {
    font-weight: 600;
}

.message-row.read {
    opacity: 0.85;
}

/* Mobile-specific improvements */
@media (max-width: 991.98px) {
    /* Mobile accordion styling */
    #mobileEchoAreasAccordion .accordion-button {
        font-weight: 500;
        padding: 1rem;
        background-color: #f8f9fa;
        border: 2px solid #dee2e6;
        text-align: left;
    }
    
    #mobileEchoAreasAccordion .accordion-button:not(.collapsed) {
        background-color: #e7f3ff;
        border-color: #0d6efd;
        color: #0d6efd;
        box-shadow: none;
    }
    
    #mobileEchoAreasAccordion .accordion-button:focus {
        box-shadow: 0 0 0 0.25rem rgba(13, 110, 253, 0.25);
        border-color: #0d6efd;
    }
    
    /* Mobile areas list styling */
    #mobileEchoareasList .list-group-item {
        border: none;
        border-bottom: 1px solid #dee2e6;
        padding: 0.75rem 1rem;
        cursor: pointer;
    }
    
    #mobileEchoareasList .list-group-item:hover {
        background-color: #f8f9fa;
    }
    
    #mobileEchoareasList .list-group-item.active {
        background-color: #0d6efd;
        border-color: #0d6efd;
    }
    
    /* Enhance message table readability on mobile */
    .message-table {
        /*font-size: 0.9rem;*/
        font-size: 1em;
    }
    
    .message-table th,
    .message-table td {
        padding: 0.5rem;
        vertical-align: middle;
    }
}

/* Small mobile devices */
@media (max-width: 575.98px) {
    .message-table {
        font-size: 0.8rem;
    }
    
    .badge {
        font-size: 0.7rem;
    }
    
    /* Keep all columns visible since echoarea is now integrated into subject */
    
    /* Echoarea badge styling in message subject */
    .message-subject .badge {
        font-size: 0.6rem;
        margin-bottom: 0.25rem;
    }
}

/* Sharing modal styles */
.modal-dialog .alert {
    margin-bottom: 1rem;
}

.modal-body .form-check {
    border: 1px solid #e9ecef;
    border-radius: 0.375rem;
    padding: 0.75rem;
    background-color: #f8f9fa;
}

.modal-body .form-check:hover {
    background-color: #e9ecef;
}

.modal-body .form-check-input:checked ~ .form-check-label {
    color: #0d6efd;
}

.modal-body .input-group {
    box-shadow: inset 0 1px 2px rgba(0, 0, 0, 0.075);
    border-radius: 0.375rem;
}

.modal-body .input-group .form-control {
    font-family: 'Courier New', Monaco, Consolas, monospace;
    font-size: 0.875rem;
    background-color: #f8f9fa;
    border: 1px solid #dee2e6;
}

.modal-body .input-group .btn {
    border-left: none;
}

.modal-footer .btn-group {
    gap: 0.25rem;
}

.modal-footer .btn-group .btn {
    border-radius: 0.375rem !important;
}

#shareButton {
    position: relative;
}

#shareButton:hover {
    background-color: #17a2b8;
    border-color: #17a2b8;
    color: white;
}

/* Share result styling */
#shareResult .alert-success {
    border: 1px solid #d1e7dd;
    background-color: #d1e7dd;
    color: #0f5132;
}

#shareResult .alert-success .fas {
    color: #0f5132;
}

/* Share error styling */
#shareError .alert-danger {
    border: 1px solid #f5c2c7;
    background-color: #f8d7da;
    color: #842029;
}

#shareError .alert-danger .fas {
    color: #842029;
}

/* Loading states */
.btn .fa-spinner {
    animation: fa-spin 1s infinite linear;
}

/* Responsive modal adjustments */
@media (max-width: 576px) {
    .modal-dialog {
        margin: 0.5rem;
    }
    
    .modal-body {
        padding: 1rem;
    }
    
    .modal-body .input-group .form-control {
        font-size: 0.75rem;
    }
    
    .modal-footer {
        flex-direction: column;
        gap: 0.5rem;
    }
    
    .modal-footer .btn-group {
        width: 100%;
        flex-direction: column;
    }
    
    .modal-footer .btn {
        width: 100%;
    }
}

/* Threading styles with colored left borders */
.thread-root {
    border-left: 3px solid #0d6efd;
    background-color: rgba(13, 110, 253, 0.05);
}

.thread-reply {
    background-color: rgba(108, 117, 125, 0.02);
}

.thread-level-1 {
    border-left: 2px solid #6c757d;
    background-color: rgba(108, 117, 125, 0.05);
}

.thread-level-2 {
    border-left: 2px solid #28a745;
    background-color: rgba(40, 167, 69, 0.05);
}

.thread-level-3 {
    border-left: 2px solid #ffc107;
    background-color: rgba(255, 193, 7, 0.05);
}

.thread-level-4, .thread-level-5, .thread-level-6, .thread-level-7, .thread-level-8, .thread-level-9 {
    border-left: 2px solid #dc3545;
    background-color: rgba(220, 53, 69, 0.05);
}

/* Thread root styling enhancement */
.thread-root .message-subject {
    font-weight: 500;
}

/* Reply badge styling */
.thread-root .badge.bg-secondary {
    background-color: #0d6efd !important;
    font-size: 0.7em;
}

/* Hover effects for threads */
.thread-root:hover {
    background-color: rgba(13, 110, 253, 0.1) !important;
}

.thread-reply:hover {
    background-color: rgba(108, 117, 125, 0.1) !important;
}

/* Reply indentation */
.thread-reply .message-from,
.thread-reply .message-subject {
    padding-left: 2em;
}

/* Mobile threading adjustments */
@media (max-width: 991.98px) {
    .thread-level-1, .thread-level-2, .thread-level-3, 
    .thread-level-4, .thread-level-5, .thread-level-6,
    .thread-level-7, .thread-level-8, .thread-level-9 {
        border-left-width: 1px;
    }
    
    .thread-root {
        border-left-width: 2px;
    }
    
    /* Reduce reply padding on mobile */
    .thread-reply .message-from,
    .thread-reply .message-subject {
        padding-left: 1em;
    }
}

@media (max-width: 575.98px) {
    /* Further reduce reply padding on very small screens */
    .thread-reply .message-from,
    .thread-reply .message-subject {
        padding-left: 0.5em;
    }
}

/* Purple text for messages addressed to current user */
.text-purple {
    color: #6f42c1 !important;
}

/* Threading icon styling */
.message-from .fa-reply {
    color: #6c757d;
    font-size: 0.85em;
    margin-right: 0.25rem;
}

/* Enhanced threading icon visibility */
.thread-reply .message-from .fa-reply {
    color: #0d6efd;
}

/* Message modal navigation buttons */
.modal-header .btn-sm {
    padding: 0.25rem 0.5rem;
    font-size: 0.875rem;
    min-width: 32px;
}

.modal-header .btn-sm:disabled {
    opacity: 0.3;
    cursor: not-allowed;
}

.modal-header .btn-sm i {
    font-size: 0.75rem;
}

/* Modal header layout improvements */
.modal-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.modal-header .d-flex {
    flex-shrink: 0;
}

.modal-title {
    flex: 1;
    text-align: center;
    margin: 0 1rem;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
}

/* Mobile modal navigation adjustments */
@media (max-width: 576px) {
    .modal-header .btn-sm {
        padding: 0.2rem 0.4rem;
        font-size: 0.8rem;
        min-width: 28px;
    }
    
    .modal-header .btn-sm i {
        font-size: 0.7rem;
    }
    
    .modal-title {
        font-size: 1rem;
        margin: 0 0.5rem;
    }
}

/* Touch/swipe improvements */
.modal-dialog {
    touch-action: pan-y; /* Allow vertical scrolling but enable horizontal swipe detection */
}

.modal-content {
    overflow: hidden; /* Prevent content from extending beyond modal bounds during swipes */
}

/* Add a subtle hint for swipe functionality on touch devices */
@media (pointer: coarse) {
    .modal-header::after {
        content: "← Swipe to navigate →";
        position: absolute;
        top: 100%;
        left: 50%;
        transform: translateX(-50%);
        font-size: 0.7rem;
        color: #6c757d;
        opacity: 0.7;
        white-space: nowrap;
        pointer-events: none;
        z-index: 1;
        background: rgba(255, 255, 255, 0.9);
        padding: 0.25rem 0.5rem;
        border-radius: 0.25rem;
        animation: fadeInOut 4s ease-in-out;
    }
}

@keyframes fadeInOut {
    0%, 15%, 85%, 100% { opacity: 0; }
    30%, 70% { opacity: 0.7; }
}
</style>

{% endblock %}