{% extends "base.twig" %}

{% block title %}User Management{% endblock %}

{% block content %}
<div class="container-fluid mt-4">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h2><i class="fas fa-users me-2"></i>User Management</h2>
                <div>
                    <button class="btn btn-success me-2" onclick="createNewUser()">
                        <i class="fas fa-user-plus me-2"></i>Create New User
                    </button>
                    <button class="btn btn-info me-2" onclick="showUsersNeedingReminders()">
                        <i class="fas fa-bell me-2"></i>Need Reminders
                        <span id="reminders-count" class="badge bg-light text-dark ms-1" style="display: none;">0</span>
                    </button>
                    <button class="btn btn-warning me-2" onclick="cleanupRegistrations()">
                        <i class="fas fa-broom me-2"></i>Cleanup
                    </button>
                    <button class="btn btn-primary" onclick="refreshData()">
                        <i class="fas fa-sync-alt me-2"></i>Refresh
                    </button>
                </div>
            </div>

            <!-- Pending Registrations -->
            <div class="card mb-4">
                <div class="card-header">
                    <h5 class="mb-0">
                        <i class="fas fa-user-clock me-2"></i>Pending Registrations
                        <span id="pending-count" class="badge bg-warning ms-2">0</span>
                    </h5>
                </div>
                <div class="card-body">
                    <div id="pending-users-container">
                        <div class="text-center py-4">
                            <div class="spinner-border" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                            <p class="mt-2">Loading pending registrations...</p>
                        </div>
                    </div>
                </div>
            </div>

            <!-- All Users -->
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0">
                        <i class="fas fa-users me-2"></i>All Users
                        <span id="users-count" class="badge bg-info ms-2">0</span>
                    </h5>
                </div>
                <div class="card-body">
                    <div id="users-container">
                        <div class="text-center py-4">
                            <div class="spinner-border" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                            <p class="mt-2">Loading users...</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Approval Modal -->
<div class="modal fade" id="approvalModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="fas fa-user-check me-2"></i>
                    <span id="approval-action-title">Approve User</span>
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div id="user-details"></div>
                
                <div class="mt-4">
                    <label for="admin-notes" class="form-label">Admin Notes</label>
                    <textarea class="form-control" id="admin-notes" rows="3" 
                              placeholder="Optional notes about this decision..."></textarea>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-success" id="approve-btn" onclick="processUser('approve')">
                    <i class="fas fa-check me-2"></i>Approve
                </button>
                <button type="button" class="btn btn-danger" id="reject-btn" onclick="processUser('reject')">
                    <i class="fas fa-times me-2"></i>Reject
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Create New User Modal -->
<div class="modal fade" id="createUserModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="fas fa-user-plus me-2"></i>Create New User
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="createUserForm">
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="create-username" class="form-label">Username</label>
                                <input type="text" class="form-control" id="create-username" required
                                       pattern="[a-zA-Z0-9_]{3,20}" title="3-20 characters, letters, numbers, and underscores only">
                                <div class="form-text">3-20 characters, letters, numbers, and underscores only</div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="create-real-name" class="form-label">Real Name</label>
                                <input type="text" class="form-control" id="create-real-name" required>
                            </div>
                        </div>
                    </div>
                    
                    <div class="mb-3">
                        <label for="create-email" class="form-label">Email Address</label>
                        <input type="email" class="form-control" id="create-email">
                        <div class="form-text">Optional - for account recovery and notifications</div>
                    </div>
                    
                    <div class="mb-3">
                        <label for="create-password" class="form-label">Password</label>
                        <input type="password" class="form-control" id="create-password" required minlength="8">
                        <div class="form-text">Minimum 8 characters</div>
                    </div>
                    
                    <div class="mb-3">
                        <label for="create-confirm-password" class="form-label">Confirm Password</label>
                        <input type="password" class="form-control" id="create-confirm-password" required>
                    </div>
                    
                    <div class="row">
                        <div class="col-md-6">
                            <div class="form-check mb-3">
                                <input class="form-check-input" type="checkbox" id="create-is-active" checked>
                                <label class="form-check-label" for="create-is-active">
                                    Account is active
                                </label>
                                <div class="form-text">Inactive users cannot log in</div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-check mb-3">
                                <input class="form-check-input" type="checkbox" id="create-is-admin">
                                <label class="form-check-label" for="create-is-admin">
                                    Administrator privileges
                                </label>
                                <div class="form-text">Admins can manage users and system settings</div>
                            </div>
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-success" onclick="saveNewUser()">
                    <i class="fas fa-user-plus me-2"></i>Create User
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Edit User Modal -->
<div class="modal fade" id="editUserModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="fas fa-user-edit me-2"></i>Edit User
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="editUserForm">
                    <input type="hidden" id="edit-user-id">
                    
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="edit-username" class="form-label">Username</label>
                                <input type="text" class="form-control" id="edit-username" readonly>
                                <div class="form-text">Username cannot be changed</div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="edit-real-name" class="form-label">Real Name</label>
                                <input type="text" class="form-control" id="edit-real-name" required>
                            </div>
                        </div>
                    </div>
                    
                    <div class="mb-3">
                        <label for="edit-email" class="form-label">Email Address</label>
                        <input type="email" class="form-control" id="edit-email">
                    </div>
                    
                    <div class="row">
                        <div class="col-md-6">
                            <div class="form-check mb-3">
                                <input class="form-check-input" type="checkbox" id="edit-is-active">
                                <label class="form-check-label" for="edit-is-active">
                                    Account is active
                                </label>
                                <div class="form-text">Inactive users cannot log in</div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-check mb-3">
                                <input class="form-check-input" type="checkbox" id="edit-is-admin">
                                <label class="form-check-label" for="edit-is-admin">
                                    Administrator privileges
                                </label>
                                <div class="form-text">Admins can manage users and system settings</div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="mb-3">
                        <label for="edit-new-password" class="form-label">New Password</label>
                        <input type="password" class="form-control" id="edit-new-password" minlength="8">
                        <div class="form-text">Leave blank to keep current password. Minimum 8 characters if changing.</div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" onclick="saveUserChanges()">
                    <i class="fas fa-save me-2"></i>Save Changes
                </button>
            </div>
        </div>
    </div>
</div>

{% endblock %}

{% block scripts %}
<script>
let currentPendingUserId = null;

$(document).ready(function() {
    loadPendingUsers();
    loadAllUsers();
    loadUsersNeedingReminders();
});

function refreshData() {
    loadPendingUsers();
    loadAllUsers();
    loadUsersNeedingReminders();
}

function loadPendingUsers() {
    console.log('Loading pending users...');
    $.ajax({
        url: '/api/admin/pending-users',
        method: 'GET',
        dataType: 'json',
        success: function(response) {
            console.log('Pending users response:', response);
            if (response.success) {
                renderPendingUsers(response.users);
            } else {
                console.error('Pending users error:', response.error);
                showError('Failed to load pending users: ' + (response.error || 'Unknown error'));
            }
        },
        error: function(xhr) {
            console.error('AJAX error for pending users:', xhr.status, xhr.statusText, xhr.responseText);
            showError('Failed to load pending users: ' + xhr.status + ' ' + xhr.statusText);
        }
    });
}

function loadAllUsers() {
    console.log('Loading all users...');
    $.ajax({
        url: '/api/admin/users',
        method: 'GET',
        dataType: 'json',
        success: function(response) {
            console.log('All users response:', response);
            if (response.success) {
                renderAllUsers(response.users);
            } else {
                console.error('All users error:', response.error);
                showError('Failed to load users: ' + (response.error || 'Unknown error'));
            }
        },
        error: function(xhr) {
            console.error('AJAX error for all users:', xhr.status, xhr.statusText, xhr.responseText);
            showError('Failed to load users: ' + xhr.status + ' ' + xhr.statusText);
        }
    });
}

function renderPendingUsers(users) {
    const container = $('#pending-users-container');
    $('#pending-count').text(users.length);
    
    if (users.length === 0) {
        container.html(`
            <div class="text-center py-4 text-muted">
                <i class="fas fa-inbox fa-3x mb-3"></i>
                <p>No pending registrations</p>
            </div>
        `);
        return;
    }
    
    let html = '<div class="table-responsive"><table class="table table-hover">';
    html += `
        <thead>
            <tr>
                <th>Username</th>
                <th>Real Name</th>
                <th>Email</th>
                <th>Requested</th>
                <th>IP Address</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
    `;
    
    users.forEach(user => {
        const requestedDate = new Date(user.requested_at).toLocaleString();
        html += `
            <tr>
                <td><strong>${escapeHtml(user.username)}</strong></td>
                <td>${escapeHtml(user.real_name || '')}</td>
                <td>${escapeHtml(user.email || 'Not provided')}</td>
                <td>${requestedDate}</td>
                <td><code>${escapeHtml(user.ip_address || '')}</code></td>
                <td>
                    <button class="btn btn-sm btn-info me-1" onclick="viewUser(${user.id})">
                        <i class="fas fa-eye"></i> View
                    </button>
                    <button class="btn btn-sm btn-success me-1" onclick="approveUserModal(${user.id}, 'approve')">
                        <i class="fas fa-check"></i> Approve
                    </button>
                    <button class="btn btn-sm btn-danger" onclick="approveUserModal(${user.id}, 'reject')">
                        <i class="fas fa-times"></i> Reject
                    </button>
                </td>
            </tr>
        `;
    });
    
    html += '</tbody></table></div>';
    container.html(html);
}

function renderAllUsers(users) {
    const container = $('#users-container');
    $('#users-count').text(users.length);
    
    let html = '<div class="table-responsive"><table class="table table-hover">';
    html += `
        <thead>
            <tr>
                <th>ID</th>
                <th>Username</th>
                <th>Real Name</th>
                <th>Email</th>
                <th>Status</th>
                <th>Admin</th>
                <th>Created</th>
                <th>Last Login</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
    `;
    
    users.forEach(user => {
        const createdDate = user.created_at ? new Date(user.created_at).toLocaleDateString() : 'Unknown';
        const lastLogin = user.last_login ? new Date(user.last_login).toLocaleString() : 'Never';
        const statusBadge = user.is_active ? 
            '<span class="badge bg-success">Active</span>' : 
            '<span class="badge bg-danger">Inactive</span>';
        const adminBadge = user.is_admin ? 
            '<span class="badge bg-warning">Admin</span>' : 
            '<span class="badge bg-secondary">User</span>';
            
        html += `
            <tr>
                <td>${user.id}</td>
                <td><strong>${escapeHtml(user.username)}</strong></td>
                <td>${escapeHtml(user.real_name || '')}</td>
                <td>${escapeHtml(user.email || 'Not provided')}</td>
                <td>${statusBadge}</td>
                <td>${adminBadge}</td>
                <td>${createdDate}</td>
                <td>${lastLogin}</td>
                <td>
                    <button class="btn btn-sm btn-primary me-1" onclick="editUser(${user.id})">
                        <i class="fas fa-edit"></i> Edit
                    </button>
                    <button class="btn btn-sm btn-${user.is_active ? 'warning' : 'success'} me-1" onclick="toggleUserStatus(${user.id}, ${user.is_active ? 'false' : 'true'})">
                        <i class="fas fa-${user.is_active ? 'pause' : 'play'}"></i> ${user.is_active ? 'Disable' : 'Enable'}
                    </button>`;
        
        // Add reminder button if user hasn't logged in yet
        if (!user.last_login && user.is_active) {
            html += `
                    <button class="btn btn-sm btn-info me-1" onclick="sendAccountReminder(${user.id}, '${escapeHtml(user.username)}')" title="Send account reminder">
                        <i class="fas fa-bell"></i> Remind
                    </button>`;
        }
        
        html += `
                </td>
            </tr>
        `;
    });
    
    html += '</tbody></table></div>';
    container.html(html);
}

function viewUser(userId) {
    // Load detailed user info for viewing
    $.ajax({
        url: '/api/admin/pending-users/' + userId,
        method: 'GET',
        dataType: 'json',
        success: function(response) {
            if (response.success) {
                const user = response.user;
                const requestedDate = new Date(user.requested_at).toLocaleString();
                
                let details = `
                    <div class="row">
                        <div class="col-md-6">
                            <h6>Basic Information</h6>
                            <table class="table table-sm">
                                <tr><th>Username:</th><td>${escapeHtml(user.username)}</td></tr>
                                <tr><th>Real Name:</th><td>${escapeHtml(user.real_name || 'Not provided')}</td></tr>
                                <tr><th>Email:</th><td>${escapeHtml(user.email || 'Not provided')}</td></tr>
                                <tr><th>Requested:</th><td>${requestedDate}</td></tr>
                                <tr><th>IP Address:</th><td><code>${escapeHtml(user.ip_address || '')}</code></td></tr>
                            </table>
                        </div>
                        <div class="col-md-6">
                            <h6>Request Details</h6>
                            <p><strong>Reason for joining:</strong></p>
                            <div class="border p-2 bg-light">
                                ${escapeHtml(user.reason || 'No reason provided').replace(/\n/g, '<br>')}
                            </div>
                            <p class="mt-2"><strong>User Agent:</strong></p>
                            <small class="text-muted">${escapeHtml(user.user_agent || 'Not available')}</small>
                        </div>
                    </div>
                `;
                
                $('#user-details').html(details);
                currentPendingUserId = userId;
                $('#approval-action-title').text('User Details');
                $('#approve-btn, #reject-btn').hide();
                new bootstrap.Modal(document.getElementById('approvalModal')).show();
            }
        }
    });
}

function approveUserModal(userId, action) {
    viewUser(userId);
    // Show appropriate buttons after user details are loaded
    setTimeout(() => {
        if (action === 'approve') {
            $('#approval-action-title').text('Approve User Registration');
            $('#approve-btn').show();
            $('#reject-btn').hide();
        } else {
            $('#approval-action-title').text('Reject User Registration');
            $('#approve-btn').hide();
            $('#reject-btn').show();
        }
    }, 500);
}

function processUser(action) {
    if (!currentPendingUserId) return;
    
    const notes = $('#admin-notes').val();
    const btn = action === 'approve' ? $('#approve-btn') : $('#reject-btn');
    const originalText = btn.html();
    
    btn.prop('disabled', true).html('<i class="fas fa-spinner fa-spin me-2"></i>Processing...');
    
    $.ajax({
        url: '/api/admin/pending-users/' + currentPendingUserId + '/' + action,
        method: 'POST',
        data: { notes: notes },
        dataType: 'json',
        success: function(response) {
            if (response.success) {
                showSuccess(action === 'approve' ? 'User approved successfully!' : 'User rejected successfully!');
                $('#approvalModal').modal('hide');
                refreshData();
                $('#admin-notes').val('');
            } else {
                showError('Failed to ' + action + ' user: ' + (response.error || 'Unknown error'));
            }
        },
        error: function(xhr) {
            showError('Failed to ' + action + ' user');
        },
        complete: function() {
            btn.prop('disabled', false).html(originalText);
        }
    });
}

function escapeHtml(text) {
    if (!text) return '';
    return text
        .replace(/&/g, "&amp;")
        .replace(/</g, "&lt;")
        .replace(/>/g, "&gt;")
        .replace(/"/g, "&quot;")
        .replace(/'/g, "&#039;");
}

function showSuccess(message) {
    // Simple success notification - could be enhanced with toast/alert system
    alert('Success: ' + message);
}

function showError(message) {
    // Simple error notification - could be enhanced with toast/alert system
    alert('Error: ' + message);
}

function editUser(userId) {
    console.log('Editing user:', userId);
    
    // Load user data
    $.ajax({
        url: '/api/admin/users/' + userId,
        method: 'GET',
        dataType: 'json',
        success: function(response) {
            if (response.success) {
                const user = response.user;
                
                // Populate form fields
                $('#edit-user-id').val(user.id);
                $('#edit-username').val(user.username);
                $('#edit-real-name').val(user.real_name || '');
                $('#edit-email').val(user.email || '');
                $('#edit-is-active').prop('checked', !!user.is_active);
                $('#edit-is-admin').prop('checked', !!user.is_admin);
                $('#edit-new-password').val('');
                
                // Show modal
                new bootstrap.Modal(document.getElementById('editUserModal')).show();
            } else {
                showError('Failed to load user data: ' + (response.error || 'Unknown error'));
            }
        },
        error: function(xhr) {
            console.error('AJAX error for edit user:', xhr.status, xhr.statusText, xhr.responseText);
            showError('Failed to load user data: ' + xhr.status + ' ' + xhr.statusText);
        }
    });
}

function saveUserChanges() {
    const userId = $('#edit-user-id').val();
    const newPassword = $('#edit-new-password').val();
    
    // Validate password if provided
    if (newPassword && newPassword.length < 8) {
        showError('Password must be at least 8 characters long');
        return;
    }
    
    const data = {
        real_name: $('#edit-real-name').val(),
        email: $('#edit-email').val(),
        is_active: $('#edit-is-active').is(':checked') ? 1 : 0,
        is_admin: $('#edit-is-admin').is(':checked') ? 1 : 0
    };
    
    // Only include password if it's provided
    if (newPassword) {
        data.password = newPassword;
    }
    
    const btn = $('button[onclick="saveUserChanges()"]');
    const originalText = btn.html();
    btn.prop('disabled', true).html('<i class="fas fa-spinner fa-spin me-2"></i>Saving...');
    
    $.ajax({
        url: '/api/admin/users/' + userId,
        method: 'POST',
        data: data,
        dataType: 'json',
        success: function(response) {
            if (response.success) {
                showSuccess('User updated successfully!');
                $('#editUserModal').modal('hide');
                refreshData();
            } else {
                showError('Failed to update user: ' + (response.error || 'Unknown error'));
            }
        },
        error: function(xhr) {
            console.error('AJAX error for save user:', xhr.status, xhr.statusText, xhr.responseText);
            showError('Failed to update user: ' + xhr.status + ' ' + xhr.statusText);
        },
        complete: function() {
            btn.prop('disabled', false).html(originalText);
        }
    });
}

function toggleUserStatus(userId, newStatus) {
    const action = newStatus === 'true' ? 'enable' : 'disable';
    
    if (!confirm(`Are you sure you want to ${action} this user?`)) {
        return;
    }
    
    $.ajax({
        url: '/api/admin/users/' + userId + '/toggle-status',
        method: 'POST',
        data: { is_active: newStatus === 'true' ? 1 : 0 },
        dataType: 'json',
        success: function(response) {
            if (response.success) {
                showSuccess(`User ${action}d successfully!`);
                refreshData();
            } else {
                showError(`Failed to ${action} user: ` + (response.error || 'Unknown error'));
            }
        },
        error: function(xhr) {
            console.error('AJAX error for toggle status:', xhr.status, xhr.statusText, xhr.responseText);
            showError(`Failed to ${action} user: ` + xhr.status + ' ' + xhr.statusText);
        }
    });
}

function createNewUser() {
    // Clear form fields
    $('#create-username').val('');
    $('#create-real-name').val('');
    $('#create-email').val('');
    $('#create-password').val('');
    $('#create-confirm-password').val('');
    $('#create-is-active').prop('checked', true);
    $('#create-is-admin').prop('checked', false);
    
    // Show modal
    new bootstrap.Modal(document.getElementById('createUserModal')).show();
}

function saveNewUser() {
    const username = $('#create-username').val().trim();
    const realName = $('#create-real-name').val().trim();
    const email = $('#create-email').val().trim();
    const password = $('#create-password').val();
    const confirmPassword = $('#create-confirm-password').val();
    const isActive = $('#create-is-active').is(':checked') ? 1 : 0;
    const isAdmin = $('#create-is-admin').is(':checked') ? 1 : 0;
    
    // Validate required fields
    if (!username || !realName || !password) {
        showError('Username, real name, and password are required');
        return;
    }
    
    // Validate username format
    if (!/^[a-zA-Z0-9_]{3,20}$/.test(username)) {
        showError('Username must be 3-20 characters, letters, numbers, and underscores only');
        return;
    }
    
    // Validate password
    if (password.length < 8) {
        showError('Password must be at least 8 characters long');
        return;
    }
    
    // Validate passwords match
    if (password !== confirmPassword) {
        showError('Passwords do not match');
        return;
    }
    
    const data = {
        username: username,
        real_name: realName,
        email: email || null,
        password: password,
        is_active: isActive,
        is_admin: isAdmin
    };
    
    const btn = $('button[onclick="saveNewUser()"]');
    const originalText = btn.html();
    btn.prop('disabled', true).html('<i class="fas fa-spinner fa-spin me-2"></i>Creating...');
    
    $.ajax({
        url: '/api/admin/users/create',
        method: 'POST',
        data: data,
        dataType: 'json',
        success: function(response) {
            if (response.success) {
                showSuccess('User created successfully!');
                $('#createUserModal').modal('hide');
                refreshData();
            } else {
                showError('Failed to create user: ' + (response.error || 'Unknown error'));
            }
        },
        error: function(xhr) {
            console.error('AJAX error for create user:', xhr.status, xhr.statusText, xhr.responseText);
            let errorMsg = 'Failed to create user';
            if (xhr.responseJSON && xhr.responseJSON.error) {
                errorMsg += ': ' + xhr.responseJSON.error;
            } else {
                errorMsg += ': ' + xhr.status + ' ' + xhr.statusText;
            }
            showError(errorMsg);
        },
        complete: function() {
            btn.prop('disabled', false).html(originalText);
        }
    });
}

function cleanupRegistrations() {
    if (!confirm('This will remove all approved registration records and old rejected registrations (30+ days). Are you sure?')) {
        return;
    }
    
    const btn = $('button[onclick="cleanupRegistrations()"]');
    const originalText = btn.html();
    btn.prop('disabled', true).html('<i class="fas fa-spinner fa-spin me-2"></i>Cleaning...');
    
    $.ajax({
        url: '/api/admin/users/cleanup',
        method: 'POST',
        dataType: 'json',
        success: function(response) {
            if (response.success) {
                const result = response.result;
                showSuccess(`Cleanup completed! Removed ${result.approved_removed} approved and ${result.old_rejected_removed} old rejected registrations (${result.total_cleaned} total).`);
                refreshData();
            } else {
                showError('Failed to cleanup registrations: ' + (response.error || 'Unknown error'));
            }
        },
        error: function(xhr) {
            console.error('AJAX error for cleanup:', xhr.status, xhr.statusText, xhr.responseText);
            showError('Failed to cleanup registrations: ' + xhr.status + ' ' + xhr.statusText);
        },
        complete: function() {
            btn.prop('disabled', false).html(originalText);
        }
    });
}

function sendAccountReminder(userId, username) {
    if (!confirm(`Send account reminder to ${username}? This will send a reminder message via netmail and email (if available).`)) {
        return;
    }
    
    $.ajax({
        url: '/api/admin/users/' + userId + '/send-reminder',
        method: 'POST',
        dataType: 'json',
        success: function(response) {
            if (response.success) {
                let message = response.message;
                if (response.email_sent) {
                    message += ' (sent via netmail and email)';
                } else {
                    message += ' (sent via netmail only)';
                }
                showSuccess(message);
                refreshData(); // Refresh to update any status changes
            } else {
                showError('Failed to send reminder: ' + (response.error || 'Unknown error'));
            }
        },
        error: function(xhr) {
            console.error('AJAX error for send reminder:', xhr.status, xhr.statusText, xhr.responseText);
            let errorMsg = 'Failed to send reminder';
            if (xhr.responseJSON && xhr.responseJSON.error) {
                errorMsg += ': ' + xhr.responseJSON.error;
            } else {
                errorMsg += ': ' + xhr.status + ' ' + xhr.statusText;
            }
            showError(errorMsg);
        }
    });
}

function loadUsersNeedingReminders() {
    $.ajax({
        url: '/api/admin/users/need-reminders',
        method: 'GET',
        dataType: 'json',
        success: function(response) {
            if (response.success) {
                updateRemindersCount(response.users.length);
            }
        },
        error: function(xhr) {
            console.error('AJAX error for users needing reminders:', xhr.status, xhr.statusText, xhr.responseText);
            // Hide count on error
            $('#reminders-count').hide();
        }
    });
}

function updateRemindersCount(count) {
    const badge = $('#reminders-count');
    if (count > 0) {
        badge.text(count).show();
    } else {
        badge.hide();
    }
}

function showUsersNeedingReminders() {
    $.ajax({
        url: '/api/admin/users/need-reminders',
        method: 'GET',
        dataType: 'json',
        success: function(response) {
            if (response.success) {
                if (response.users.length === 0) {
                    showSuccess('No users currently need account reminders. All users have logged in!');
                    return;
                }
                
                let message = `Found ${response.users.length} user(s) who haven't logged in yet:\n\n`;
                response.users.forEach(user => {
                    const createdDate = new Date(user.created_at).toLocaleDateString();
                    message += `• ${user.username} (${user.real_name || 'No real name'}) - created ${createdDate}\n`;
                });
                message += `\nYou can send individual reminders using the "Remind" buttons in the user list below.`;
                
                alert(message);
            } else {
                showError('Failed to load users needing reminders: ' + (response.error || 'Unknown error'));
            }
        },
        error: function(xhr) {
            console.error('AJAX error for show users needing reminders:', xhr.status, xhr.statusText, xhr.responseText);
            showError('Failed to load users needing reminders: ' + xhr.status + ' ' + xhr.statusText);
        }
    });
}
</script>
{% endblock %}